import pandas as pd
import numpy as np
from scipy.stats import iqr

# Cargar el archivo CSV
df = pd.read_csv("Data_CHF_Zhao_2020_ATE.csv")

# Seleccionar solo las columnas numéricas
numerical_vars = df.select_dtypes(include=['number'])

# Desviación estándar de las columnas numéricas
std_devs = numerical_vars.std()

# Medias de las columnas numéricas
means = numerical_vars.mean()

# Cantidad de muestras para cada variable
n_samples = numerical_vars.count()

# Error estándar medio (SEM)
sems = std_devs / np.sqrt(n_samples)

# Porcentaje del error estándar respecto a la media
sem_percentage = (sems / means) * 100

# IQR utilizando la función iqr de scipy.stats
iqr_data = numerical_vars.apply(iqr)

# Crear un DataFrame para mostrar los resultados
uncertainty_df = pd.DataFrame({
    "Variable": numerical_vars.columns,
    "Mean": means.values,
    "Standard Deviation": std_devs.values,
    "SEM": sems.values,
    "SEM % of Mean": sem_percentage.values,
    "IQR": iqr_data.values
})

# Mostrar el DataFrame con los resultados
print(uncertainty_df)

## Interpretación de los Resultados


import matplotlib.pyplot as plt
import seaborn as sns

# Configurar el estilo de Seaborn
sns.set(style="whitegrid")

# Crear una figura con subgráficos 3x3
fig, axes = plt.subplots(3, 3, figsize=(18, 12))
axes = axes.flatten()

# Lista de columnas numéricas
numerical_cols = numerical_vars.columns

# Graficar histogramas para cada variable numérica
for i, col in enumerate(numerical_cols):
    if i < len(axes):  # Asegurarse de no exceder el número de subgráficos
        sns.histplot(numerical_vars[col], bins=30, kde=True, ax=axes[i])
        axes[i].set_title(f"Histograma de {col}")

# Ajustar el diseño
plt.tight_layout()
